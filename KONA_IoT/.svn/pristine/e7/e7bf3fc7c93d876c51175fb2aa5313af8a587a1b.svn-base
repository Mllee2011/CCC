package com.konai.konaiot;

import org.globalplatform.GPSystem;
import org.globalplatform.SecureChannel;

import javacard.framework.APDU;
import javacard.framework.Applet;
import javacard.framework.AppletEvent;
import javacard.framework.CardRuntimeException;
import javacard.framework.ISO7816;
import javacard.framework.ISOException;
import javacard.framework.JCSystem;
import javacard.framework.Util;
import javacard.security.RandomData;

/** 
 * KONA_IoT <br>
 * 
 *  @author mllee
 *
 */

// APPLET : 0F4B4F4E41
//        : 0F4B4F4E4101

public class KONA_IoT extends Applet implements AppletEvent {
	
	private static byte intanceNO = (byte)0x00;
	private static byte[] TransientData;
	private static RandomData rng;
	private static SecureChannel gpSecureChannel;
	
	protected static byte[] buf_tmp;
	
	
	private byte currentPhase = Constants.STATE_INACTIVE;
	private short allocated_records;
	SecureObjectRecord[] records;
	
	public void uninstall() {
		if(intanceNO == (byte)0x01){
			
			rng = null;
			TransientData = null;
			records = null;
			gpSecureChannel =null;
			buf_tmp = null;
			
			intanceNO = (byte)0;
		}else{
			intanceNO--;
		}
	}

	public KONA_IoT(byte[] bArray, short bOffset){
		
		//install parameter offset
		short offset = (short)(bOffset + bArray[bOffset] + bArray[(short)(bOffset+bArray[bOffset]+1)] + 2);
		
		switch(bArray[offset]){
			case 0:// C9 00 
				break;
			default:
				ISOException.throwIt(ISO7816.SW_DATA_INVALID);
		}
		if(TransientData == null){
			TransientData = JCSystem.makeTransientByteArray(Constants.TRANSIENT_DATA_SIZE, JCSystem.CLEAR_ON_DESELECT)					;
			buf_tmp			= JCSystem.makeTransientByteArray(Constants.LEN_BUF_CERT, JCSystem.CLEAR_ON_DESELECT);
		}
		
		records = new SecureObjectRecord[Constants.RECORD_NUMBER];
		allocated_records =0;
		
		rng =  RandomData.getInstance(RandomData.ALG_SECURE_RANDOM);
		
		setPhase(Constants.STATE_PERSO);// set phase perso_data
		intanceNO++;
		
		
	}
	
	public static void install(byte[] bArray, short bOffset, byte bLength) {
		// GP-compliant JavaCard applet registration
		new KONA_IoT(bArray, bOffset).register(bArray, (short) (bOffset + 1),
				bArray[bOffset]);
	}


	
	public void process(APDU apdu) {
		
		byte[] apduBuffer = apdu.getBuffer();
		byte ins = apduBuffer[ISO7816.OFFSET_INS];

		apduBuffer[ISO7816.OFFSET_CLA] &= (byte)0xFC; 		
		try{
			if (ins == Constants.INS_SELECT_AID){  
				iot_select(apdu, apduBuffer);
				return;
			}
			switch (ins) {
	        case Constants.INS_GET_RANDOM:
	            getRandom(apdu);
	            break;
	        case Constants.INS_INITIALIZE_UPDATE:
	            // TODO SCP03
	        	initalizeupdate_02(apdu);
	            break;
	        case Constants.INS_EXTERNAL_AUTHENTICATE:
	            // TODO SCP03
	        	externalauthenticate_02(apdu);
	            break;
	        case Constants.INS_SE_SESSION:
	            // handleSESession
	            break;
	        case Constants.INS_GENERATE_KEYPAIR:
	            //generateKeyPair(apdu);
	            break;
	        case Constants.INS_PUT_KEY:
	            // putKey(apdu);
	            break;
	        case Constants.INS_SIGN_CDATA:
	            // signData(apdu);
	            break;
	        case Constants.INS_VERIFY_SIGNATURE:
	            // verifySignature(apdu);
	            break;
	        case Constants.INS_STORE_DATA:
	            storeData(apdu);
	            break;
	        case Constants.INS_GET_DATA:
	        	getData(apdu);
	            break;
	        case Constants.INS_SET_LOCK_STATE:
	            //setLockState(apdu);
	            break;
	        case Constants.INS_COMPACT_STORAGE:
	        	//compactStorage();
	            break;
	        case Constants.INS_GET_RESPONSE:
	        	getResponse(apdu);
	            break;    
			
				default:
				// good practice: If you don't know the INStruction, say so:
				ISOException.throwIt(ISO7816.SW_INS_NOT_SUPPORTED);
			}
		}catch (ISOException e) {
			ISOException.throwIt(e.getReason());
		}
	}

	private void initalizeupdate_02(APDU apdu) {
		// TODO Auto-generated method stub
		apdu.setIncomingAndReceive();
		try {
			gpSecureChannel = GPSystem.getSecureChannel();
			apdu.setOutgoingAndSend((short)ISO7816.OFFSET_CDATA, gpSecureChannel.processSecurity(apdu));
			
		} catch (CardRuntimeException cre) {
			// Open Secure Channel failed
			ISOException.throwIt(ISO7816.SW_CONDITIONS_NOT_SATISFIED);
		}
	}
	public void externalauthenticate_02(APDU apdu)  {
		
		apdu.setIncomingAndReceive();
		
		gpSecureChannel.processSecurity(apdu);
	}

	private void getRandom(APDU apdu) {
		// TODO Auto-generated method stub
	    byte[] buffer = apdu.getBuffer();
	    short lc = apdu.setIncomingAndReceive(); //

	    rng.generateData(buffer, (short) 0, lc);

	    apdu.setOutgoing();
	    apdu.setOutgoingLength((byte) lc);
	    apdu.sendBytes((short) 0, lc);

	}
	private void getResponse(APDU apdu) {
		// TODO Auto-generated method stub
		short le = apdu.setOutgoing();
		short off_start = (short)(Util.getShort(TransientData, Constants.OFF_OFF_RESPONSE_START));
		short remain =(short)(Util.getShort(TransientData, Constants.OFF_OBJECT_SIZE)-off_start - le);

		if(remain > (short)0){
			apdu.setOutgoingLength(le);
			apdu.sendBytesLong(buf_tmp,(short)off_start, le);
			Util.setShort(TransientData, Constants.OFF_OFF_RESPONSE_START, (short)(off_start+le));
			
			if(remain > (short)0x00FF){
				ISOException.throwIt((short)ISO7816.SW_BYTES_REMAINING_00);
			}else{
				ISOException.throwIt((short)(ISO7816.SW_BYTES_REMAINING_00+remain));
			}
	    }else if(remain ==0){
	    	//reset
	    	Util.arrayFillNonAtomic(TransientData, Constants.OFF_OBJECT_SIZE, (short)4, (byte)0);
	    	apdu.setOutgoingLength(le);
	    	apdu.sendBytesLong(buf_tmp,(short)off_start, le);
	    	return; 
	    }else ISOException.throwIt(ISO7816.SW_WRONG_LENGTH);
	}
	
	private void getData(APDU apdu) {
		// TODO Auto-generated method stub
		byte[] buffer = apdu.getBuffer();
	    short objectId = Util.getShort(buffer, ISO7816.OFFSET_P1);
	    short idx = SecureObjectRecord.search(records, allocated_records, objectId);
	    
	    if (idx == (short) 0xFFFF) {
	        ISOException.throwIt((short) 0x6A88); // Not Found
	    }

	    SecureObjectRecord rec = records[idx];
	    
	    Util.arrayCopyNonAtomic(rec.data, (short) 0, buf_tmp, (short) 0, rec.dataLength);
	    short le = apdu.setOutgoing();
	    short remain = (short)(rec.dataLength - le);
	    if(remain > (short)0){
	    	
	    	Util.setShort(TransientData, Constants.OFF_OBJECT_SIZE,rec.dataLength);
	    	
	    	if(remain > (short)0x00FF){
	    		ISOException.throwIt((short)ISO7816.SW_BYTES_REMAINING_00);
	    	}else{
	    		ISOException.throwIt((short)(ISO7816.SW_BYTES_REMAINING_00+remain));
	    	}
	    }else{
	    	apdu.setOutgoingLength(rec.dataLength);
	    	apdu.sendBytesLong(buf_tmp,(short)0, rec.dataLength);
	    }   
	}

	private void storeData(APDU apdu) {
		// TODO Auto-generated method stub
	    byte[] buffer = apdu.getBuffer();
	    short lc = (short)(apdu.setIncomingAndReceive()&0x00FF);
	    
	    short offset = ISO7816.OFFSET_CDATA;
	    byte p2 = buffer[ISO7816.OFFSET_P2];

	    
	    short pendingLength = Util.getShort(TransientData, (short)(Constants.OFF_OBJECT_SIZE));
	    
	    if (pendingLength == 0) {
	        // NEW OBJECT
		    if (allocated_records >= Constants.RECORD_NUMBER) {
		        ISOException.throwIt(ISO7816.SW_FILE_FULL);
		    }
		    SecureObjectRecord rec = new SecureObjectRecord();
		    rec.status = Constants.STATUS_VALID;
		    rec.objectId = Util.getShort(buffer, offset); offset += 2;
		    Util.arrayCopy(buffer, offset, rec.acl, (short) 0, (short) 3); offset += 3;
		    rec.dataLength = Util.getShort(buffer, offset); offset += 2;

	        rec.data = new byte[rec.dataLength];
	        //Object head is 7byte
	        Util.arrayCopy(buffer, offset, rec.data, (short) 0, (short)(lc-7));

	        records[allocated_records] = rec;

	        pendingLength = (short)(rec.dataLength - lc+7);
	        Util.setShort(TransientData, (short)(Constants.OFF_OBJECT_SIZE), pendingLength);
	    } else {
	        //store data chaining
	        SecureObjectRecord rec = records[(short)(allocated_records)];

	        short written = (short)(rec.dataLength - pendingLength);

	        if ((short)(written + lc) > rec.dataLength) {
	            ISOException.throwIt(ISO7816.SW_WRONG_LENGTH);
	        }

	        Util.arrayCopy(buffer, offset, rec.data, written, lc);

	        pendingLength = (short)(pendingLength - lc);
	        Util.setShort(TransientData, (short)(Constants.OFF_OBJECT_SIZE), pendingLength);
	    }

	    if (pendingLength == 0) {
	        //store object is finished. 
	        allocated_records++;
	    }
	}

	private void setPhase(byte phase)
	{
		TransientData[Constants.OFF_SM_DATA] = phase;
		currentPhase = phase;
	}
	private short checkPhase(byte phase)
	{
		TransientData[Constants.OFF_SM_DATA] = currentPhase;
		
		if (TransientData[Constants.OFF_SM_DATA] != phase)
		{
			return Constants.S_NOK;
		}
		else
		{
			return Constants.S_OK;
		}
	}
	private final short check_user_phase() {
		return checkPhase(Constants.STATE_ACTIVE);
	} // end of check_user_phase

	private short check_state(byte state){
		if(TransientData[Constants.OFF_SM_DATA] == state){
			return Constants.S_OK;
		}
		return Constants.S_NOK;
	}
	private final void iot_select(APDU apdu, byte[] apduBuffer) throws ISOException{

		IoT_Util.check_CLA(apduBuffer[ISO7816.OFFSET_CLA], (byte)0x00);
		
		if(check_user_phase() == Constants.S_OK){
			
		}else{
			//error
			return;
		}
		//Util.arrayCopyNonAtomic(FCI, (byte)0, apduBuffer, (byte)0, (short)FCI.length);
		//apdu.setOutgoingAndSend((byte)0, (short)FCI.length);

	}
}
